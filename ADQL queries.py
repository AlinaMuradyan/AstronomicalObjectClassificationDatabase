# -*- coding: utf-8 -*-
"""Untitled1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/11EZejL7-jQZCFi3FsS64Bsi41YBHBpUd
"""

!pip install pyvo astroquery

from astroquery.gaia import Gaia
import pandas as pd

# Define an ADQL query
query = """
SELECT TOP 100 source_id, ra, dec, phot_g_mean_mag
FROM gaiadr3.gaia_source
WHERE phot_g_mean_mag < 10
"""

# Launch the query and get results
job = Gaia.launch_job(query)
gaia_data = job.get_results()

# Convert to Pandas DataFrame
df = gaia_data.to_pandas()

# Display data
print(df.head())

!pip install sqlalchemy psycopg2-binary

from sqlalchemy import create_engine

# ElephantSQL database credentials
username = "zlqlnssi"
password = "jyIWCKXW31GN-TS05XW-2z-lL_Q3jRBv"
host = "john.db.elephantsql.com"
port = "5432"
database = "zlqlnssi"

# Create the connection string
connection_string = f"postgresql+psycopg2://{username}:{password}@{host}:{port}/{database}"

# Create a database engine
engine = create_engine(connection_string)

# Test the connection
try:
    with engine.connect() as connection:
        print("Connection successful!")
        # Run a simple test query
        result = connection.execute("SELECT 1;")
        for row in result:
            print("Test query result:", row)
except Exception as e:
    print("An error occurred:", e)

object_types_data = pd.DataFrame({
    "type_name": ["Star", "Galaxy", "Quasar", "Nebula"]
})

try:
    object_types_data.to_sql("object_types", engine, if_exists="append", index=False)
    print("Object types inserted successfully!")
except Exception as e:
    print("An error occurred:", e)

# Map Gaia data to celestial_object schema
celestial_data = pd.DataFrame({
    "object_type_id": [1] * len(df),  # Assuming all objects are stars (type_id=1)
    "object_name": ["Gaia-" + str(sid) for sid in df["SOURCE_ID"]],
    "right_ascension": df["ra"],
    "declination": df["dec"]
})

try:
    celestial_data.to_sql("celestial_object", engine, if_exists="append", index=False)
    print("Celestial objects inserted successfully!")
except Exception as e:
    print("An error occurred:", e)

criteria_data = pd.DataFrame({
    "criteria_name": ["Photometric Magnitude"],
    "criteria_measure": ["mag"]
})

try:
    criteria_data.to_sql("criteria", engine, if_exists="append", index=False)
    print("Criteria data inserted successfully!")
except Exception as e:
    print("An error occurred:", e)

# Assuming criteria_id for 'Photometric Magnitude' is 1
criteria_numeric_data = pd.DataFrame({
    "object_id": range(1, len(df) + 1),  # Assuming sequential object_ids in 'celestial_object'
    "criteria_id": [1] * len(df),  # Photometric Magnitude
    "value": df["phot_g_mean_mag"]
})

try:
    criteria_numeric_data.to_sql("celestial_object_criteria_numeric", engine, if_exists="append", index=False)
    print("Numeric criteria data inserted successfully!")
except Exception as e:
    print("An error occurred:", e)

from sqlalchemy import text

# Query to fetch data
query = text("SELECT * FROM celestial_object LIMIT 10;")

try:
    with engine.connect() as connection:
        result = connection.execute(query)
        for row in result:
            print(row)
except Exception as e:
    print("An error occurred:", e)

from pyvo.dal import TAPService

# Connect to Gaia Archive TAP Service
service = TAPService("https://gea.esac.esa.int/tap-server/tap")

# Define your ADQL query
query = """
SELECT *
FROM gaiadr3.gaia_source
WHERE source_id = '3011968416163350272'
"""
result = service.search(query)

# Display results
print(result.to_table())

query = """
SELECT
    c.object_id AS star_id,
    c.object_name AS star_name,
    sd.constellation_id,
    c1.object_name AS constellation_name
FROM celestial_object AS c
JOIN stars_data AS sd ON c.object_id = sd.object_id
JOIN celestial_object AS c1 ON sd.constellation_id = c1.object_id
WHERE c.object_type_id = 1
ORDER BY c1.object_name;
"""

try:
    with engine.connect() as connection:
        stars_constellations = pd.read_sql(query, connection)
        print("Stars and their constellations:")
        print(stars_constellations)
except Exception as e:
    print("Error executing query:", e)

from pyvo.dal import TAPService
import pandas as pd

# Connect to Gaia TAP Service
service = TAPService("https://gea.esac.esa.int/tap-server/tap")

# Define an ADQL query to fetch example data
query = """
SELECT TOP 1 source_id, ra, dec, phot_g_mean_mag
FROM gaiadr3.gaia_source
WHERE phot_g_mean_mag < 10
"""

# Execute the query
result = service.search(query)

# Convert the result to a Pandas DataFrame
gaia_data = result.to_table().to_pandas()

# Display the fetched data
print("Example object from Gaia DB:")
print(gaia_data)

# Use the source_id for further queries
example_source_id = gaia_data['source_id'].iloc[0]
print(f"Using source_id: {example_source_id}")

query = """
SELECT column_name, data_type
FROM information_schema.columns
WHERE table_name = 'celestial_object';
"""

try:
    with engine.connect() as connection:
        schema = pd.read_sql(query, connection)
        print(schema)
except Exception as e:
    print("Error fetching schema:", e)

from sqlalchemy import text

# SQL query to alter the column type
alter_query = text("""
ALTER TABLE celestial_object
ALTER COLUMN object_id TYPE BIGINT USING object_id::BIGINT;
""")

try:
    with engine.connect() as connection:
        connection.execute(alter_query)
        print("Column 'object_id' updated to BIGINT successfully!")
except Exception as e:
    print("Error updating column type:", e)

from sqlalchemy import text

query1 = text("""
SELECT
    c.object_id AS star_id,
    c.object_name AS star_name,
    sd.constellation_id,
    c1.object_name AS constellation_name
FROM celestial_object AS c
JOIN stars_data AS sd ON c.object_id = sd.object_id
JOIN celestial_object AS c1 ON sd.constellation_id = c1.object_id
WHERE c.object_id = 1576683529448755328
ORDER BY c1.object_name;
""")

try:
    with engine.connect() as connection:
        stars_constellations = pd.read_sql(query1, connection)
        print("Stars and their constellations:")
        print(stars_constellations)
except Exception as e:
    print("Error executing query:", e)

query2 = text("""
SELECT
    h.date_time,
    h.old_data,
    h.new_data
FROM history AS h
JOIN celestial_object AS c ON h.object_id = c.object_id
WHERE c.object_id = 1576683529448755328
ORDER BY h.date_time;
""")

try:
    with engine.connect() as connection:
        star_history = pd.read_sql(query2, connection)
        print(f"History of the object with object_id 1576683529448755328:")
        print(star_history)
except Exception as e:
    print("Error executing query:", e)

query3 = text("""
SELECT
    cr.criteria_name,
    CASE WHEN co.value IS NOT NULL THEN CAST(co.value AS TEXT) ELSE ccg.category_name END AS value
FROM celestial_object AS c
LEFT JOIN celestial_object_criteria_numeric AS co ON c.object_id = co.object_id
LEFT JOIN criteria AS cr ON co.criteria_id = cr.criteria_id
LEFT JOIN celestial_object_criteria_category AS cc ON c.object_id = cc.object_id
LEFT JOIN criteria_category AS ccg ON cc.category_id = ccg.category_id
WHERE c.object_id = 1576683529448755328;
""")

try:
    with engine.connect() as connection:
        star_criteria = pd.read_sql(query3, connection)
        print(f"Numeric and categorical criteria for the object with object_id 1576683529448755328:")
        print(star_criteria)
except Exception as e:
    print("Error executing query:", e)

query1 = text(f"""
SELECT *
FROM celestial_object
WHERE object_name = 'Gaia-{example_source_id}';
""")
try:
    with engine.connect() as connection:
        object_exists = pd.read_sql(query1, connection)
        print("Verify Object Exists:")
        print(object_exists)
except Exception as e:
    print("Error executing query:", e)

query2 = text(f"""
SELECT c.criteria_name
FROM criteria AS c
JOIN celestial_object_criteria_numeric AS cocn
    ON c.criteria_id = cocn.criteria_id
JOIN celestial_object AS co
    ON cocn.object_id = co.object_id
WHERE co.object_name = 'Gaia-{example_source_id}'
  AND cocn.value IS NULL;
""")
try:
    with engine.connect() as connection:
        missing_numeric_criteria = pd.read_sql(query2, connection)
        print("Missing Numeric Criteria:")
        print(missing_numeric_criteria)
except Exception as e:
    print("Error executing query:", e)

query3 = text(f"""
SELECT co.object_name, c.criteria_name, cocn.value
FROM celestial_object AS co
JOIN celestial_object_criteria_numeric AS cocn
    ON co.object_id = cocn.object_id
JOIN criteria AS c
    ON cocn.criteria_id = c.criteria_id
WHERE 1=CONTAINS(
    POINT('ICRS', co.right_ascension, co.declination),
    CIRCLE('ICRS', {ra}, {dec}, 0.1)  -- Coordinates from Gaia
)
AND cocn.value IS NULL
LIMIT 100;
""")

try:
    with engine.connect() as connection:
        nearby_objects = pd.read_sql(query4, connection)
        print("Nearby Objects:")
        print(nearby_objects)
except Exception as e:
    print("Error executing query:", e)

!pip install sqlalchemy psycopg2-binary pandas

query = """
SELECT * FROM object_types WHERE type_name = 'Stars';
"""

try:
    with engine.connect() as connection:
        stars_mapping = pd.read_sql(query, connection)
        print("Stars Mapping:")
        print(stars_mapping)
except Exception as e:
    print("Error executing query:", e)

query = """
SELECT
    co.object_id AS object_id,          -- Unique identifier for the star
    co.object_name AS StarName,         -- Name of the star
    c.criteria_name,                    -- Name of the numeric criterion
    cocn.value AS criteria_value        -- Value of the numeric criterion
FROM celestial_object AS co
JOIN celestial_object_criteria_numeric AS cocn ON co.object_id = cocn.object_id
JOIN criteria AS c ON cocn.criteria_id = c.criteria_id
WHERE co.object_type_id = 1            -- Ensure this maps to 'Stars'
AND c.criteria_name IN (
    'Temperature',
    'Mass',
    'Apparent Magnitude V',
    'Apparent Magnitude J',
    'Apparent Magnitude K',
    'Distance',
    'Rotation',
    'Rotational velocity',
    'Age'
)
ORDER BY co.object_name;
"""

try:
    with engine.connect() as connection:
        numeric_criteria = pd.read_sql(query, connection)
        print("Numeric Criteria for Stars:")
        print(numeric_criteria)
except Exception as e:
    print("Error executing query:", e)

query = """
SELECT
    co.object_id AS object_id,          -- Unique identifier for the star
    co.object_name AS StarName,         -- Name of the star
    c.criteria_name,                    -- Name of the categorical criterion
    cc.category_name AS criteria_value  -- Value of the categorical criterion
FROM celestial_object AS co
JOIN celestial_object_criteria_category AS cocc ON co.object_id = cocc.object_id
JOIN criteria_category AS cc ON cocc.category_id = cc.category_id
JOIN criteria AS c ON cc.criteria_id = c.criteria_id
WHERE co.object_type_id = 1            -- Ensure this maps to 'Stars'
AND c.criteria_name IN ('Class', 'Color', 'Evolutionary stage')
ORDER BY co.object_name;
"""

try:
    with engine.connect() as connection:
        categorical_criteria = pd.read_sql(query, connection)
        print("Categorical Criteria for Stars:")
        print(categorical_criteria)
except Exception as e:
    print("Error executing query:", e)

query = """
SELECT * FROM criteria WHERE criteria_name IN (
    'Temperature',
    'Mass',
    'Apparent Magnitude V',
    'Apparent Magnitude J',
    'Apparent Magnitude K',
    'Distance',
    'Rotation',
    'Rotational velocity',
    'Age',
    'Class',
    'Color',
    'Evolutionary stage'
);
"""

try:
    with engine.connect() as connection:
        criteria_verification = pd.read_sql(query, connection)
        print("Criteria Verification:")
        print(criteria_verification)
except Exception as e:
    print("Error executing query:", e)

query = """
SELECT DISTINCT cc.criteria_id, cc.category_name
FROM criteria_category AS cc
JOIN criteria AS c ON cc.criteria_id = c.criteria_id
WHERE c.criteria_name IN ('Class', 'Color', 'Evolutionary stage');
"""

try:
    with engine.connect() as connection:
        categories_verification = pd.read_sql(query, connection)
        print("Categories Verification:")
        print(categories_verification)
except Exception as e:
    print("Error executing query:", e)